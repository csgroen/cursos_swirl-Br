- Class: meta
  Course: Programação em R
  Lesson: Vetores
  Author: Nick Carchedi, Kelin Gonçalves de Oliveira (Tradução)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: A forma mais simples e comum de uma estrutura de dados no R é o vetor.

- Class: text
  Output: 'Vetores vem em duas formas diferentes: vetores atômicos e listas. Um vetor atômico contém apenas um tipo de dado, enquanto que a lista contém múltiplos tipos de dados. Vamos explorar os vetores atômicos antes de aprender listas.'

- Class: text
  Output: Em lições anteriores, nós trabalhamos com vetores numéricos, que é um tipo de vetor atômico. Outros tipos de vetores atômicos incluem lógico, caracter, número inteiro e número complexo. Nesta lição, iremos olhar mais de perto os vetores lógicos e de caracteres.

- Class: text
  Output: Vetores lógicos podem conter os valores TRUE (que significa verdadeiro), FALSE (para falso), e NA (Não Atribuído, ou seja, um valor faltante). Estes valores são gerados como resultado de condições lógicas. Vamos experimentar algumas condições lógicas simples.

- Class: cmd_question
  Output: Primeiramente, crie um vetor numérico contendo os valores 0.5, 55, -10, e 6. O vetor deve estar contido na variável de nome num_vet.
  CorrectAnswer: num_vet <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vet <- c(0.5, 55, -10, 6)')
  Hint: Lembre-se que a função c() é utilizada para criar vetores. Se você esqueceu como que usa esta função, use ?c para acessar o manual. Não se esqueça de atribuir o vetor a uma variável chamada num_vet.

- Class: cmd_question
  Output: 'Agora, crie uma variável chamada tf que receberá o resultado de num_vet < 1. Esta expressão é lida como: num_vet menor que 1'
  CorrectAnswer: tf <- num_vet < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vet < 1')
  Hint: Utilize tf <- num_vet < 1 para atribuir o resultado de num_vet < 1 à variável chamada tf.

- Class: mult_question
  Output: O que você acha que tf vai conter?
  CorrectAnswer: um vetor de 4 valores lógicos
  AnswerChoices: um vetor de 4 valores lógicos; um único valor lógico
  AnswerTests: omnitest(correctVal='um vetor de 4 valores lógicos')
  Hint: Lembre-se que o R realiza diversas operações elemento-a-elemento. São as chamadas operações vetorizadas.

- Class: cmd_question
  Output: Veja o conteúdo de tf agora.
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: Digite tf e pressione Enter para ver o seu conteúdo.

- Class: text
  Output: A expressão num_vet < 1 é uma condição e o resultado contido em tf nos diz se cada elemento correspondente do vetor num_vet satisfaz esta condição.

- Class: text
  Output: O primeiro elemento de num_vet é 0.5, que é menor do que 1, portanto a condição 0.5 < 1 resulta em TRUE. O segundo elemento de num_vet é 55, que é maior que 1, fazendo com que a condição 55 < 1 resulte em FALSE. A mesma lógica é aplicada para o terceiro e quarto elemento.

- Class: cmd_question
  Output: Vamos ver outra. Digite num_vet >= 6 sem atribuir o resultado a uma variável.
  CorrectAnswer: num_vet >= 6
  AnswerTests: omnitest(correctExpr='num_vet >= 6')
  Hint: Não precisa criar uma nova variável para esta questão. Nós apenas queremos visualizar o resultado de num_vet >= 6. Garanta que não há espaço entre os símbolos `>` e `=` symbols. A junção destes símbolos será lida pelo R como uma expressão única que representa 'maior que ou igual a'.

- Class: text
  Output: Desta vez, queremos saber se cada elemento individual de num_vet é maior que OU igual a 6. Uma vez que apenas 55  e 6 são maiores que OU iguais a 6, o segundo e quanto elemento do resultado será igual a TRUE, enquanto que o primeiro e terceiro elemento serão FALSE.

- Class: text
  Output: Os símbolos `<` e `>=` nestes exemplos são chamados de 'operadores lógicos'. Outros operadores lógicos incluem `>` (maior que), `<=` (menor que ou igual a), `==` (idêntico a), e `!=` (diferente de).

- Class: text
  Output: Se nós tivermos duas expressões lógicas, A e B, podemos perguntar se há ao menos um TRUE entre A | B (onde o símbolo '|' significa OU) ou se ambos são TRUE entre A & B (onde, o símbolo '&' significa E). Por último, !A é a negação de de A, sendo TRUE quando A é FALSE e vice versa.

- Class: text
  Output: É uma boa ideia gastar um tempinho brincando com algumas combinações destas operações lógicas até você se sentir confortável com o uso destas. Faremos alguns exemplos aqui para você começar a se acostumar.

- Class: text
  Output: Tente predizer o resultado de cada uma das condições a seguir. Se precisar, você pode usar papel e caneta para construir a lógica. Se você empacar, chute a resposta e você terá 50% de chance de acertar!

- Class: mult_question
  Output: Qual será o retorno da expressão (3 > 5) & (4 == 4) ?
  CorrectAnswer: 'FALSE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='FALSE')
  Hint: Quebre esta questão respondendo as seguintes questões. Mantenha em mente que Não é equivalente a FALSE e Sim equivale a TRUE. Três é maior que cinco? Quatro é igual a quatro? O `&` no meio avalia se ambos os lados retornaram TRUE. Se ambos os lados retornam TRUE cada, a expressão inteira será TRUE, se não, será FALSE.

- Class: mult_question
  Output: (TRUE == TRUE) | (TRUE == FALSE) retornará FALSE ou TRUE?
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: O `|` no meio da expressão avalia se pelo menos um dos lados é TRUE. Se sim, a condição inteira retornará TRUE. Se não, é FALSE.

- Class: mult_question
  Output: Agora um desafio. A expressão ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5) retornará TRUE ou FALSE?
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Esta é mais difícil mesmo. Lembre-se que o símbolo `!` indica a negação do resultado da expressão em seguida. Também, assim como na matemática, há uma ordem de resolução dos operadores. Aquelas operações que estiverem dentro dos parênteses devem ser solucionadas antes. Ou seja, tu deves trabalhar a expressão de dentro para fora.

- Class: text
  Output: Não se preocupe se você achou estas questões um pouco complicadas. É assim mesmo. Trabalhar com expressões lógicas no R demanda prática, mas teus esforços serão recompensados em lições futuras.

- Class: text
  Output: Vetores de caracteres também são bastante comuns em R. Aspas duplas são usadas para distinguir caracteres, como no exemplo a seguir.

- Class: cmd_question
  Output: 'Crie um vetor contendo as seguintes palavras: "Meu", "nome", "é". Lembre-se de envolver cada palavra em aspas duplas, para que o R saiba que elas sao palavras e não comandos. Guarde o vetor em uma variável chamada minha_char.'
  CorrectAnswer: minha_char <- c("Meu", "nome", "é")
  AnswerTests: omnitest(correctExpr='minha_char <- c("Meu", "nome", "é")')
  Hint: Digite minha_char <- c("Meu", "nome", "é") para criar uma nova variável chamada minha_char que contém um vetor de caracteres de tamanho 3. Garanta que cada elemento está separado por vírgulas presentes FORA das aspas duplas.

- Class: cmd_question
  Output: Veja o conteúdo de minha_char para ver como ela é.
  CorrectAnswer: minha_char
  AnswerTests: omnitest(correctExpr='minha_char')
  Hint: Digite minha_char para ver o conteúdo.

- Class: text
  Output: Neste momento, minha_char é um vetor de caracteres de tamanho/comprimento igual a 3 elementos. Vamos supor que  nós desejamos unir os elementos da minha_char para formar um caracter único (por exemplo, formar um vetor de tamanho 1). Para isso, nós podemos utilizar a função paste().

- Class: cmd_question
  Output: Digite paste(minha_char, collapse = " "). Tenha certeza de que você colocou espaço entre as aspa duplas após o argumento collapse. Você verá o motivo destes espaços daqui a pouco.
  CorrectAnswer: paste(minha_char, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(minha_char, collapse = " ")')
  Hint: Use paste(minha_char, collapse = " ") para juntar as palavras em um vetor para que eles quase formem uma sentença. Deve haver um espaço entre as aspas duplas do argumento collapse, para que as palavras fiquem separadas.

- Class: text
  Output: O argumento `collapse` da função paste() diz ao R que, ao juntar os elementos do vetor minha_char, nós desejamos que fiquem separados por espaços simples.

- Class: text
  Output: Mas parece que algo está faltando... Ah, sim! O seu nome!

- Class: cmd_question
  Output: 'Para adicionar (em outras palavras, concatenar) o seu nome ao final de minha_char, use a função c(): c(minha_char, "Coloque_seu_nome_aqui"). Deixe o nome envolto por aspas duplas quando for substituir o "Coloque_seu_nome_aqui". Tente agora, guarde o resultado em uma nova variável chamada meu_nome.'
  CorrectAnswer: meu_nome <- c(minha_char, "Swirl")
  AnswerTests: var_is_a("character", "meu_nome"); expr_uses_func("c"); expr_creates_var("meu_nome"); val_has_length(4)
  Hint: Coloque o seu nome ao final do vetor minha _char utilizando a função c(). Tenha certeza de que você atribuiu o resultado à variável chamada meu_nome. Se, por coincidência, seu nome for "Swirl", você deve digitar meu_nome <- c(minha_char, "Swirl").

- Class: cmd_question
  Output: Dê uma olhada no conteúdo de meu_nome.
  CorrectAnswer: meu_nome
  AnswerTests: omnitest(correctExpr='meu_nome')
  Hint: Digite meu_nome e presione Enter para ver o conteúdo da variável.

- Class: cmd_question
  Output: Agora, utilize a função paste() mais uma vez para unir as palavras dentro da variável meu_nome em uma única frase (ou seja, uma string). Não se esqueça de informar o argumento collapse = " ".
  CorrectAnswer: paste(meu_nome, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(meu_nome, collapse = " ")')
  Hint: Use paste(meu_nome, collapse = " ") para unir as quatro palavras, separadas por um espaço simples.

- Class: text
  Output: Neste exemplo, nós utilizamos a função paste() para nir os elementos de um punico vetor de caracteres. Esta função também pode ser utilizada para unir elementos de múltiplos vetores de caracteres.

- Class: cmd_question
  Output: Em um exemplo bastante simples, podemos unir vetores de caracteres onde cada vetor tem tamanho igual a 1 (unir duas palavras, por exemplo). Tente paste("Olá", "mundo!", sep = " "), onde o argumento `sep` indica ao R que desejamos um espaço simples entre os elementos que acabaram de ser unidos.
  CorrectAnswer: paste("Olá", "mundo!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Olá", "mundo!", sep = " ")')
  Hint: Digite paste("Olá", "mundo!", sep = " ") para unir as palavras "Olá" e "mundo", separados por um espaço simples especificado pelas aspas duplas do argumento 'sep'.

- Class: cmd_question
  Output: Em um exemplo um pouco mais elaborado, podemos unir dois vetores, cada um de tamanho 3. Utilize paste() para unir um vetor de números inteiros que vão de 1:3 com um vetor de caracteres contendo c("X", "Y", "Z"). Desta vez, utilize sep = "" para não ter espaços entre os elementos.
  CorrectAnswer: paste(1:3, c("X", "Y", "Z"), sep = "")
  AnswerTests: any_of_exprs('paste(1:3, c("X", "Y", "Z"), sep = "")', 'paste(c(1:3), c("X", "Y", "Z"), sep = "")')
  Hint: Faça paste(1:3, c("X", "Y", "Z"), sep = "") para ver o que acontece quando unimos dois vetores de tamanhos iguais usando paste().

- Class: text
  Output: 'O que você acha que aconteceria se os vetores tivessem tamanhos diferentes?'

- Class: cmd_question
  Output: Reciclagem de vetor! Tente paste(LETTERS, 1:4, sep = "-"), onde LETTERS é uma variável pré definida em R que contém um vetor de caracteres com todas as 26 letras do alfabeto.
  CorrectAnswer: paste(LETTERS, 1:4, sep = "-")
  AnswerTests: omnitest(correctExpr='paste(LETTERS, 1:4, sep = "-")')
  Hint: Digite paste(LETTERS, 1:4, sep = "-") para ver como o R recicla o vetor 1:4 até completar o tamanho do vetor em LETTERS. Perceba que estamos usando `-` como nosso separador no lugar do espaço simples.

- Class: text
  Output: Já que o vetor de caracteres LETTERS é maior que o vetor numérico 1:4, o R simplesmente recicla, ou seja, repete o vetor menor até que este preencha o mesmo tamanho do vetor maior.

- Class: text
  Output: Também é interessante notar que os números foram transformados em caracteres, ou seja, sofreram coerção quando a função paste() foi usada.

- Class: text
  Output: Nós iremos discutir coerção em outra lição, mas resumidamente, significa que os números 1, 2, 3, e 4 presentes no resultado não são mais números no R, mas são os caracteres "1", "2", "3", e "4".

- Class: mult_question
  Output: Você gostaria de notificar alguém sobre o seu sucesso em completar esta lição?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
