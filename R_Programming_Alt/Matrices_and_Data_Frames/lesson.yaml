- Class: meta
  Course: Programação em R
  Lesson: Matrizes e Data Frames
  Author: Nick Carchedi, Clarice S. Groeneveld (tradução)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Nesta lição, vamos cobrir matrizes e data frames. Ambos representam tipos de dados 'retangulares', o que quer dizer que são usados para armazenar dados tabulares, com linhas e colunas.

- Class: text
  Output: A principal diferença, como você verá, é que matrizes podem conter somente uma classe de dados, enquanto data frames podem consistir de várias classes de dados diferentes.

- Class: cmd_question
  Output: Vamos criar um vetor contendo os números de 1 a 20 usando o operador `:`. Armazene o resultado em uma variável chamada meu_vetor.
  CorrectAnswer: meu_vetor <- 1:20
  AnswerTests: omnitest(correctExpr='meu_vetor <- 1:20')
  Hint: Você aprendeu sobre o operador `:` na lição sobre sequências. Se você quiser criar um vetor contendo os números 1, 2 e 3 (nesta ordem), você pode usar tanto c(1, 2, 3) quanto 1:3. Neste caso, queremos os números de 1 a 20 armazenados em uma variável chamada meu_vetor. Além disso, lembre-se que você não precisa da função c() quando usar `:`.

- Class: cmd_question
  Output: Veja o conteúdo do vetor que você criou.
  CorrectAnswer: meu_vetor
  AnswerTests: omnitest(correctExpr='meu_vetor')
  Hint: Digite meu_vetor para ver seus conteúdos.

- Class: cmd_question
  Output: A função dim() nos apresenta as 'dimensões' de um objeto. O que acontece se nós fizermos dim(meu_vetor)? Teste para ver o resultado.
  CorrectAnswer: dim(meu_vetor)
  AnswerTests: omnitest(correctExpr='dim(meu_vetor)')
  Hint: Só digite dim(meu_vetor) para ver o que acontece.

- Class: cmd_question
  Output: Claramente, isto não é muito útil! Já que meu_vetor é um vetor, ele não tem um atributo 'dim' (então é só nulo (NULL)), mas podemos encontrar seu comprimento usando a função length(). Tente isso agora.
  CorrectAnswer: length(meu_vetor)
  AnswerTests: omnitest(correctExpr='length(meu_vetor)')
  Hint: Digite length(meu_vetor) para ver o comprimento do vetor que você acabou de criar.

- Class: cmd_question
  Output: Ah! Era isso que queríamos. Mas, o que acontece se você der a meu_vetor um atributo `dim`. Vamos testar. Digite dim(meu_vetor) <- c(4, 5).
  CorrectAnswer: dim(meu_vetor) <- c(4, 5)
  AnswerTests: omnitest(correctExpr='dim(meu_vetor) <- c(4, 5)')
  Hint: Digite dim(meu_vetor) <- c(4, 5) para dar um atributo `dim` ao meu_vetor.

- Class: text
  Output: Não tem problema se o último comando pareceu um pouco estranho. Ele deveria! A função dim() permite que você receba ou atribua o atributo `dim` para um objeto R. Neste caso, nós atribuímos o valor c(4, 5) ao atributo `dim` de meu_vetor.

- Class: cmd_question
  Output: Use dim(meu_vetor) para confirmar que atribuímos o atributo `dim` corretamente.
  CorrectAnswer: dim(meu_vetor)
  AnswerTests: omnitest(correctExpr='dim(meu_vetor)')
  Hint: Apenas digite dim(meu_vetor) para se certificar que o atributo `dim` foi estabelecido.

- Class: cmd_question
  Output: Outra forma de fazer isso é chamando a função attributes() com meu_vetor. Tente isso agora.
  CorrectAnswer: attributes(meu_vetor)
  AnswerTests: omnitest(correctExpr='attributes(meu_vetor)')
  Hint: O comando attributes(meu_vetor) vai mostrar todos os atributos para o objeto meu vetor.

- Class: text
  Output: Assim como na aula de matemática, quando lidamos com objetos bi-dimensionais (pense em uma mesa retangular), o primeiro número é o número de linhas e o segundo é o número de colunas. Portanto, acabamos de dar a meu_vetor 4 linhas e 5 colunas.

- Class: cmd_question
  Output: Mas espere! Isso não parece mais um vetor. Bem, não é. Agora é uma matriz. Acesse os conteúdos de meu_vetor para ver sua aparência.
  CorrectAnswer: meu_vetor
  AnswerTests: omnitest(correctExpr='meu_vetor')
  Hint: Digite meu_vetor para ver seus conteúdos.

- Class: cmd_question
  Output: Agora, vamos confirmar que é realmente uma matriz usando a função class(). Digite class(meu_vetor) para entender o que quero dizer.
  CorrectAnswer: class(meu_vetor)
  AnswerTests: omnitest(correctExpr='class(meu_vetor)')
  Hint: Digite class(meu_vetor) para ver a classe de meu_vetor.

- Class: cmd_question
  Output: Realmente, meu_vetor agora agora é uma matriz. Precisamos armazená-lo em uma nova variável para lembrar o que ele é. Guarde o valor de meu_vetor em uma nova variável chamada minha_matriz.
  CorrectAnswer: minha_matriz <- meu_vetor
  AnswerTests: omnitest(correctExpr='minha_matriz <- meu_vetor')
  Hint: Já que não podemos mudar o nome da variável meu_vetor, vamos desginar o seu valor a uma nova variável com minha_matriz <- meu_vetor.

- Class: text
  Output: O exemplo que usamos até agora tem a intenção de ilustrar que uma matriz é simplesmente um vetor atômico com um atributo dimensão. Uma forma mais direta que criar a mesma matriz é usando a função matrix().

- Class: cmd_question
  Output: Chame o arquivo de ajuda para a função matrix() usando a função `?`.
  CorrectAnswer: ?matrix
  AnswerTests: omnitest(correctExpr='?matrix')
  Hint: O comando ?matrix vai fazer a mágica.

- Class: cmd_question
  Output: Agora, olhe a documentação para a função matrix() e veja se você consegue entender como criar uma matriz contendo os mesmos números (1-20) e dimensões (4 linhas, 5 colunas) chamando a função matrix(). Guarde o resultado em uma variável chamada minha_matriz2.
  CorrectAnswer: minha_matriz2 <- matrix(1:20, nrow=4, ncol=5)
  AnswerTests: calculates_same_value('matrix(1:20, nrow=4, ncol=5)'); expr_creates_var('minha_matriz2')
  Hint: Chame a função matrix() com três argumentos – 1:20, o número de linhas e o número de colunas. Cuide para especificar arguemntos com seus nomes corretos e armazenar o resultado em minha_matriz2 (não minha_matriz).

- Class: cmd_question
  Output: Finalmente, vamos confirmar que minha_matriz e minha_matriz2 são realmente idênticas. A função identical() vai nos dizer se os dois primeiros argumentos são os mesmos. Tente usar ela.

Finally, let's confirm that minha_matriz and minha_matriz2 are actually identical. The identical() function will tell us if its first two arguments are the same. Try it out.
  CorrectAnswer: identical(minha_matriz, minha_matriz2)
  AnswerTests: any_of_exprs('identical(minha_matriz, minha_matriz2)', 'identical(minha_matriz2, minha_matriz)')
  Hint: Se não tiver certeza de o que fazer, leia a documentação para identical() usando a função `?`.

- Class: text
  Output: Agora, iamgine que os números na nossa tabela representam medidas de um experimento clínico, onde cada linha é um paciente e cada coluna representa uma variável para qual medidas foram tiradas.

- Class: text
  Output: Nós podemos querer nomear nossas linhas para sabermos qual número pertence a qual paciente no experimento. Uma forma de fazer isso é adicionar uma coluna à matriz, que contém os nomes das quatro pessoas.

- Class: cmd_question
  Output: Vamos começar criando um vetor de caracteres contendo os nomes de nossos pacientes -- Bill, Gina, Kelly, and Sean.  Lembre-se que aspas duplas contam ao R que algo é uma string de caracteres. Guarde o resultado em um vetor chamado pacientes.
  CorrectAnswer: pacientes <- c("Bill", "Gina", "Kelly", "Sean")
  AnswerTests: omnitest(correctExpr='pacientes <- c("Bill", "Gina", "Kelly", "Sean")')
  Hint: Certifique-se que a primeira letra de cada nome está maiúscula e guarde o resultado em uma variável pacientes. Não misture a ordem dos pacientes! Isso seria desastroso!

- Class: cmd_question
  Output: Now we'll use the cbind() function to 'combine columns'. Don't worry about storing the result in a new variable. Just call cbind() with two arguments -- the pacientes vector and minha_matriz.
  CorrectAnswer: cbind(pacientes, minha_matriz)
  AnswerTests: omnitest(correctExpr='cbind(pacientes, minha_matriz)')
  Hint: Type cbind(pacientes, minha_matriz) to add the names of our pacientes to the matrix of numbers.

- Class: text
  Output: Something is fishy about our result! It appears that combining the character vector with our matrix of numbers caused everything to be enclosed in double quotes. This means we're left with a matrix of character strings, which is no good.

- Class: text
  Output: If you remember back to the beginning of this lesson, I told you that matrices can only contain ONE class of data. Therefore, when we tried to combine a character vector with a numeric matrix, R was forced to 'coerce' the numbers to characters, hence the double quotes.

- Class: text
  Output: This is called 'implicit coercion', because we didn't ask for it. It just happened. But why didn't R just convert the names of our pacientes to numbers? I'll let you ponder that question on your own.

- Class: cmd_question
  Output: So, we're still left with the question of how to include the names of our pacientes in the table without destroying the integrity of our numeric data. Try the following -- my_data <- data.frame(pacientes, minha_matriz)
  CorrectAnswer: my_data <- data.frame(pacientes, minha_matriz)
  AnswerTests: omnitest(correctExpr='my_data <- data.frame(pacientes, minha_matriz)')
  Hint: Type my_data <- data.frame(pacientes, minha_matriz), so we can explore what happens.

- Class: cmd_question
  Output: Now view the contents of my_data to see what we've come up with.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Type my_data to view its contents.

- Class: text
  Output: It looks like the data.frame() function allowed us to store our character vector of names right alongside our matrix of numbers. That's exactly what we were hoping for! 

- Class: text
  Output: Behind the scenes, the data.frame() function takes any number of arguments and returns a single object of class `data.frame` that is composed of the original objects.

- Class: cmd_question
  Output: Let's confirm this by calling the class() function on our newly created data frame.
  CorrectAnswer: class(my_data)
  AnswerTests: omnitest(correctExpr='class(my_data)')
  Hint: The class function takes one argument -- the object of which you want to determine the class.

- Class: text
  Output: It's also possible to assign names to the individual rows and columns of a data frame, which presents another possible way of determining which row of values in our table belongs to each patient.

- Class: text
  Output: However, since we've already solved that problem, let's solve a different problem by assigning names to the columns of our data frame so that we know what type of measurement each column represents.

- Class: cmd_question
  Output: Since we have six columns (including patient names), we'll need to first create a vector containing one element for each column. Create a character vector called cnames that contains the following values (in order) -- "patient", "age", "weight", "bp", "rating", "test".
  CorrectAnswer: cnames <- c("patient", "age", "weight", "bp", "rating", "test")
  AnswerTests: omnitest(correctExpr='cnames <- c("patient", "age", "weight", "bp", "rating", "test")')
  Hint: Make sure all of the names are lowercase, surrounded by double quotes, and separated with commas. Don't forget to use the c() function.

- Class: cmd_question
  Output: Now, use the colnames() function to set the `colnames` attribute for our data frame. This is similar to the way we used the dim() function earlier in this lesson.
  CorrectAnswer: colnames(my_data) <- cnames
  AnswerTests: omnitest(correctExpr='colnames(my_data) <- cnames')
  Hint: Try colnames(my_data) <- cnames.

- Class: cmd_question
  Output: Let's see if that got the job done. Print the contents of my_data.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Print the contents of my_data to the console.

- Class: text
  Output: In this lesson, you learned the basics of working with two very important and common data structures -- matrices and data frames. There's much more to learn and we'll be covering more advanced topics, particularly with respect to data frames, in future lessons.

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of this lesson?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
