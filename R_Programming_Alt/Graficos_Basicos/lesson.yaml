- Class: meta
  Course: Programação em R
  Lesson: Gráficos Básicos
  Author: David Kane, Kelin Gonçalves de Oliveira (Tradução e Modificação)
  Type: Standard
  Organization: Williams College
  Version: 2.2.0

- Class: text
  Output: Uma das vantagens do R em relação às outras linguagens de programação, é a facilidade de criar gráficos com qualidade para serem publicadas. Nesta lição, você aprenderá sobre os gráficos básicos em R. 

- Class: text
  Output: Nós não iremos cobrir os tópicos mais avançados de gráficos em R nesta lição.

- Class: cmd_question
  Output: Para iniciar, carregue o dataframe de nome cars com data(cars).
  CorrectAnswer: data(cars)
  AnswerTests: omnitest(correctExpr='data(cars)')
  Hint: Digite data(cars) para carregar os dados.

- Class: text
  Output: De início, nós iremos trabalhar com dataframes simples, já que o objetivo principal é apresentar diversas funções de gráficos e seus argumentos. Claro que conjuntos de dados mais complexos produzem grafos mais interessantes.

- Class: cmd_question
  Output: Abra a ajuda para entender o dataset cars.
  CorrectAnswer: ?cars
  AnswerTests: any_of_exprs('?cars', 'help(cars)')
  Hint: Digite ?cars ou help(cars) para visualizar a página de ajuda que contém os detalhes do dataframe cars.

- Class: text
  Output: 'Como você pode observar na página de ajuda, cars contém apenas duas variáveis coletadas: velocidade (mph) e distância de parada (ft). Observe que o dado é de 1920.'

- Class: cmd_question
  Output: Aplique a função head() no dataset cars.
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: Digite head(cars) para ver o topo do dataframe.

- Class: text
  Output: Sempre antes de iniciar com os plots, é bom ter uma idéia de como são os dados que você está trabalhando. Para obter mais informações sobre teu conjunto de dados, comandos-chave do R como dim(), names(), head(), tail() e summary(), vão te ajudar bastante.

- Class: cmd_question
  Output: Utilize a função plot() no conjunto de dados cars para criar um gráfico de dispersão (scatter plor). 
  CorrectAnswer: plot(cars)
  AnswerTests: omnitest(correctExpr='plot(cars)')
  Hint: Digite plot(cars) para criar um scatter plot.

- Class: text
  Output: 'Como sempre, a linguagem R é sempre bastante sensitiva quanto ao tipo de informação que você forneceu, por exemplo: o R notou que a tablea de dados que você inseriu contém apenas duas colunas, então ele assumiu que deve plotar uma coluna versos a outra.'

- Class: text
  Output: Como não foi fornecido nenhum nome para os eixos do gráfico, R também presumiu que deve nomear os eixos conforme o nome das colunas. A fim de melhorar a visualização, a linguagem também inseriu marcações nos números inteiros nos eixos.

- Class: text
  Output: Vamos explorar a função plot().

- Class: cmd_question
  Output: Abra a página de ajuda sobre plot(). 
  CorrectAnswer: ?plot
  AnswerTests: any_of_exprs('?plot', 'help(plot)')
  Hint: Digite ?plot ou help(plot) para visualizar a página de ajuda de plot().

- Class: text
  Output: O help de plot() mostra os argumentos necessários que a função recebe para funcionar, sendo que há argumentos obrigatórios (sem os quais a função não funciona) e os opcionais (geramente relacionados com personalização). Os argumentos mais importantes da função plot são x e y, que correspondem às variáveis a serem plotadas (no teu caso, x é speed e y é dist), the variables that will be plotted. 

- Class: text
  Output: 'Para as próximas questões, vamos especificar na função os nomes dos argumentos que vão receber as variáveis a serem plotadas, ou seja, ao invés de digitar plot(cars) ou plot(cars$speed, cars$dist) que também funcionam, vamos usar: plot(x = cars$speed, y = cars$dist).'

- Class: cmd_question
  Output: Utilize o comando plot() para plotar o gráfico de dispersão invertido, com dist no eixo x e velocidade no eixo y. Faça conforme o exemplo que mostramos acima.
  CorrectAnswer: plot(x = cars$dist, y = cars$speed)
  AnswerTests: omnitest(correctExpr='plot(x = cars$dist, y = cars$speed)')
  Hint: Digite plot(x = cars$dist, y = cars$speed) para criar o gŕafico.

- Class: text
  Output: Observe que este resultado é diferente do obtido por plot(cars). Neste caso, além de termos trocado a ordem dos eixos, o R não teve a certeza de que você deseja utilizar os nomes das colunas para nomear, então preferiu apenas utilizar os argumentos que você passou como nome dos eixos (cars$speed, por exemplo).

- Class: text
  Output: Provavelmente, faz mais sentido ter a velocidade dos carros no eixo x, já que a distância de freagem é uma variável em função da velocidade (quanto maior a velocidade, mais espaço o carro precisará para parar completamente) e não o contrário.

- Class: text
  Output: 'Há outras maneiras de utilizar o comando de plot, utilizando uma "fórmula", por exemplo: plot(dist ~ speed, cars). No entanto, ainda não iremos utilizar esta forma. Primeiro, vamos explorar os argumentos opcionas da função.'
  

- Class: cmd_question
  Output: Recrie o plot (com velocidade no eixo x e distância no eixo y) e coloque o nome do eixo x como "Velocidade (mph)", inserindo o argumento xlab = "nome_do_eixoX". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)")')
  Hint: Coloque plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)") para criar o plot.

- Class: cmd_question
  Output: Repita o comando mantendo o nome do eixo x, mas inserindo em seguida o nome "Distância (ft)" para o eixo y com ylab = "nome_do_eixoY". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)")')
  Hint: Digite plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)") para criar o plot.

- Class: text
  Output: Também é interessante colocar um título no gráfico, a fim de deixá-lo mais didático.

- Class: cmd_question
  Output: Faça o gráfico conforme foi feito acima e ao final dos argumentos, coloque o título "Velocidade do Carro vs Distância de Freagem". O argumento para adicionar títulos é main = "título".
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)", main = "Velocidade do Carro vs Distância de Freagem")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)", main = "Velocidade do Carro vs Distância de Freagem")')
  Hint: Digite plot(x = cars$speed, y = cars$dist, xlab = "Velocidade (mph)", ylab = "Distância (ft)", main = "Velocidade do Carro vs Distância de Freagem") para criar o plot.

- Class: text
  Output: Como você deve ter visto, o ?plot ou help(plot) retorna a sintaxe de alguns argumentos apenas. Para podermos explorar outras funções gráficas, vamor olhar para a função par() que, quando combinada com plot fornece várias outras formas de melhorar o gráfico. and to other graphical functions.

- Class: cmd_question
  Output: Olhe a página de ajuda para a função par.
  CorrectAnswer: ?par
  AnswerTests: any_of_exprs('?par', 'help(par)')
  Hint: Digite ?par ou help(par) para visualizar a página de ajuda desta função.
  
- Class: cmd_question
  Output: Plot cars so that the plotted points are colored red. (Use col = 2 to achieve this effect.)
  CorrectAnswer: plot(cars, col = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, col = 2)')
  Hint: Type plot(cars, col = 2) to create the plot.

- Class: cmd_question
  Output: Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15) to achieve this effect.) 
  CorrectAnswer: plot(cars, xlim = c(10, 15))
  AnswerTests: omnitest(correctExpr='plot(cars, xlim = c(10, 15))')
  Hint: Type plot(cars, xlim = c(10, 15)) to create the plot.

- Class: text
  Output: You can also change the shape of the symbols in the plot. The help page for points (?points) provides the details.

- Class: cmd_question
  Output: Plot cars using triangles.  (Use pch = 2 to achieve this effect.) 
  CorrectAnswer: plot(cars, pch = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, pch = 2)')
  Hint: Type plot(cars, pch = 2) to create the plot.

- Class: text
  Output: Arguments like "col" and "pch" may not seem very intuitive. And that is because they aren't! So, many/most people use more modern packages, like ggplot2, for creating their graphics in R.

- Class: text
  Output: It is, however, useful to have an introduction to base graphics because many of the idioms in lattice and ggplot2 are modeled on them.

- Class: text
  Output: Let's now look at some other functions in base graphics that may be useful, starting with boxplots.

- Class: cmd_question
  Output: Load the mtcars data frame. 
  CorrectAnswer: data(mtcars)
  AnswerTests: omnitest(correctExpr='data(mtcars)')
  Hint: Type data(mtcars) to load the data.

- Class: text
  Output: Anytime that you load up a new data frame, you should explore it before using it. In the middle of a swirl lesson, just type play(). This temporarily suspends the lesson (without losing the work you have already done) and allows you to issue commands like dim(mtcars) and head(mtcars). Once you are done examining the data, just type nxt() and the lesson will pick up where it left off.

- Class: cmd_question
  Output: Look up the help page for boxplot(). 
  CorrectAnswer: ?boxplot
  AnswerTests: any_of_exprs('?boxplot', 'help(boxplot)')
  Hint: Type ?boxplot or help(boxplot) to view a help page with details about boxplot.

- Class: text
  Output: Instead of adding data columns directly as input arguments, as we did with plot(), it is often handy to pass in the entire data frame. This is what the "data" argument in boxplot() allows.

- Class: text
  Output: boxplot(), like many R functions, also takes a "formula" argument, generally an expression with a tilde ("~") which indicates the relationship between the input variables. This allows you to enter something like mpg ~ cyl to plot the relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on the y-axis.

- Class: cmd_question
  Output: Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box plot.
  CorrectAnswer: boxplot(formula = mpg ~ cyl, data = mtcars)
  AnswerTests: omnitest(correctExpr='boxplot(formula = mpg ~ cyl, data = mtcars)')
  Hint: Type boxplot(formula = mpg ~ cyl, data = mtcars) to create the plot.

- Class: text
  Output: The plot shows that mpg is much lower for cars with more cylinders. Note that we can use the same set of arguments that we explored with plot() above to add axis labels, titles and so on.

- Class: text
  Output: When looking at a single variable, histograms are a useful tool. hist() is the associated R function. Like plot(), hist() is best used by just passing in a single vector. 

- Class: cmd_question
  Output: Use hist() with the vector mtcars$mpg to create a histogram.
  CorrectAnswer: hist(mtcars$mpg)
  AnswerTests: any_of_exprs('hist(mtcars$mpg)', 'hist(x = mtcars$mpg)')
  Hint: Type hist(mtcars$mpg) to create the plot.

# Not sure what a good lesson length is for this. 
# Might add some information on saving plots.
# Other functions that I use include identify().

- Class: text
  Output: In this lesson, you learned how to work with base graphics in R. The best place to go from here is to study the ggplot2 package. If you want to explore other elements of base graphics, then this web page (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful overview.

- Class: mult_question
  Output: "Would you like to receive credit for completing this course on
    Coursera.org?"
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: coursera_on_demand()
  Hint: ""
