- Class: meta
  Course: Programação em R
  Lesson: Expressões e operações lógicas
  Author: Sean Kross, Kelin Gonçalves de Oliveira (Tradução)
  Type: Standard
  Organization: swirlstats
  Version: 2.2.15

- Class: text
  Output: Essa lição apresenta uma breve introdução às operações lógicas em R.

- Class: text
  Output: Há dois valores lógicos em R, também chamados de valores booleanos. Eles são TRUE e FALSE (inglês para Verdadeiro e Falso, respectivamente). Em R você pode construir expressões lógicas que retornarão TRUE ou FALSE.

- Class: text
  Output: Muitas das questões nesta lição implicará na avaliação de expressões lógicas. Pode ser útil abrir uma segunda sessão R para experimentar algumas destas expressões.

- Class: cmd_question
  Output: A criação de expressões lógicas requer operadores lógicos. Provavelmente, você está acostumado(a) com operadores aritméticos, como `+`, `-`, `*` e `/`.  O primeiro operador lógico que vamos discutir é o operador de igualdade representado por dois sinais 'igual' seguidos ('=='). Utilize o operador de igualdade abaixo para descobrir se TRUE é igual a TRUE.
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: Utilize o operador de igualdade e digite TRUE == TRUE

- Class: text
  Output: Assim como aritmética, as expressões lógicas podem ser agrupadas por parênteses, assim, a expressão (TRUE == TRUE) == TRUE retornará o resultado TRUE. R avaliará primeiro o que está dentro do parênteses e utilizará a resposta desta avaliação para comparar com o termo que está fora do parênteses.

- Class: cmd_question
  Output: Para testar esta propriedade, tente avaliar (FALSE == TRUE) == FALSE.
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: Digite (FALSE == TRUE) == FALSE

- Class: cmd_question
  Output: O operador de igualdade também pode ser utilizado para comparar números. Utilize `==` para ver se 6 é igual a 7.
  CorrectAnswer: 6 == 7
  AnswerTests: omnitest(correctExpr='6 == 7')
  Hint: Utilize o operador de igualdade e digite 6 == 7

- Class: text
  Output: A questão anterior retornou FALSE porque 6 é diferente de 7. Há operadores de igualdade que podem avaliar se um valor é menor ou maior que outro valor.

- Class: cmd_question
  Output: O operador "menor que" (`<`) testa se o número à esquerda do operador é menor que o número que se encontra ao lado direito do operador. Escreva uma expressão que avalie se 6 é menor que 7.
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: Utilize o operador menor que e digite 6 < 7

- Class: cmd_question
  Output: Há também um operador chamado "menor ou igual a" ('<=') que testará se o número esquerdo é menor ou igual ao número à direita do operador. Escreva uma expressão que avalie se 10 é menor ou igual a 10.
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: Use `<=` para avaliar se 10 <= 10

- Class: text
  Output: Tenha em mente que os operadores correspondentes existem e são: "maior que" (`>`) e "maior ou igual a" (`>=`).

- Class: mult_question
  Output: 'Quais das operações abaixo retornará FALSE?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36 
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: 'Se precisar, avalie a expressão em uma sessão R separada para encontrar a resposta correta.'

- Class: mult_question
  Output: 'Quais das opções abaixo retornará TRUE?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7 
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: 'Se você precisar, você pode avaliar a expressão em uma sessão R separada para encontrar a resposta correta.'

- Class: cmd_question
  Output: O próximo operador a ser discutido será o "não igual a", representado por `!=`. O operador de não igualdade testará se dois valores são diferentes, então se eu pedir pra avaliar se TRUE != FALSE, o R retornará TRUE, já que sim, as palavras TRUE e FALSE são diferentes. Assim como os operadores de igualdade, o de não igualdade também pode ser utilizado com números. Tente escrever uma expressão para avaliar se 5 é diferente de 7.
  CorrectAnswer: 5 != 7
  AnswerTests: omnitest(correctExpr='5 != 7')
  Hint: Utilize o operador de não igualdade e digite 5 != 7

- Class: cmd_question
  Output: "A fim de negar expressões booleanas, você pode utilizar o operador NOT, representado por um ponto de exclamação (`!`). Este operador retornará o contrário de cada operação. ou seja, !TRUE (diz-se: not true, inglês para não verdadeiro) retornará FALSE e !FALSE (diz-se: not false, inglês para não falso) retornará TRUE. Primeiramente, construa uma operação de igualdade de 5 igual a 7 (mas ainda não dê Enter). Em seguida, coloque na frente do parênteses da operação, o operador NOT e veja qual será o resultado."
  CorrectAnswer: '!(5 == 7)'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)')
  Hint: Essa expressão pode ser um pouco complicada, então pense na negação da expressão 5 == 7 (tudo o que você precisa é um ponto de exclamação na frente).

- Class: text
  Output: Let's take a moment to review. The equals operator `==` tests whether two boolean values or numbers are equal,
    the not equals operator `!=` tests whether two boolean values or numbers are unequal, and the NOT operator `!` negates
    logical expressions so that TRUE expressions become FALSE and FALSE expressions become TRUE.

- Class: mult_question
  Output: Which of the following evaluates to FALSE?
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1); !FALSE; 7 != 8; 9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint: 'If you need to, you can evaluate each expression in a separate R session to find the correct answer.'

- Class: mult_question
  Output: 'What do you think the following expression will evaluate to?: (TRUE != FALSE) == !(6 == 7)'
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Can there be objective truth when programming?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: 'Try to evaluate each expression in isolation and build up an answer.'

- Class: text
  Output: At some point you may need to examine relationships between multiple logical expressions. 
    This is where the AND operator and the OR operator come in.

- Class: cmd_question
  Output: Let's look at how the AND operator works. There are two AND operators in R, `&` and `&&`.
    Both operators work similarly, if the right and left operands of AND are both TRUE the entire
    expression is TRUE, otherwise it is FALSE. For example, TRUE & TRUE evaluates to TRUE. Try typing 
    FALSE & FALSE to how it is evaluated.
  CorrectAnswer: FALSE & FALSE
  AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Hint: "Just to illustrate how the AND operator works type: FALSE & FALSE"

- Class: cmd_question
  Output: "You can use the `&` operator to evaluate AND across a vector. The `&&` version of AND only evaluates 
    the first member of a vector. Let's test both for practice. Type the expression TRUE & c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: "Now to see how the AND operator works with a vector, type: 
    TRUE & c(TRUE, FALSE, FALSE)"

- Class: text
  Output: What happens in this case is that the left operand `TRUE` is recycled
    across every element in the vector of the left operand. This is the equivalent
    statement as c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE). 

- Class: cmd_question
  Output: "Now we'll type the same expression except we'll use the `&&` operator. Type the expression TRUE && c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE && c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE && c(TRUE, FALSE, FALSE)')
  Hint: "As you'll see, the && version of AND works differently. Type: 
    TRUE && c(TRUE, FALSE, FALSE)"

- Class: text
  Output: "In this case, the left operand is only evaluated with the first member
    of the right operand (the vector). The rest of the elements in the vector
    aren't evaluated at all in this expression."
    
- Class : text
  Output: The OR operator follows a similar set of rules. The `|` version of OR
    evaluates OR across an entire vector, while the `||` version of OR only evaluates
    the first member of a vector.
    
- Class : text
  Output: An expression using the OR operator will evaluate to TRUE if the left 
    operand or the right operand is TRUE. If both are TRUE, the expression will
    evaluate to TRUE, however if neither are TRUE, then the expression will be
    FALSE.
    
- Class: cmd_question
  Output: "Let's test out the vectorized version of the OR operator. Type the 
    expression TRUE | c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: "Test out the vectorized OR operator by typing: TRUE | c(TRUE, FALSE, FALSE)"
  
- Class: cmd_question
  Output: "Now let's try out the non-vectorized version of the OR operator. Type the 
    expression TRUE || c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE || c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE || c(TRUE, FALSE, FALSE)')
  Hint: "As you'll see the || version of OR is not vectorized. Type: 
    TRUE || c(TRUE, FALSE, FALSE)"
  
- Class : text
  Output: "Logical operators can be chained together just like arithmetic operators.
    The expressions: `6 != 10 && FALSE && 1 >= 2` or `TRUE || 5 < 9.3 
    || FALSE` are perfectly normal to see."
  
- Class : cmd_question
  Output: "As you may recall, arithmetic has an order of operations and so do logical
    expressions. All AND operators are evaluated before OR operators. Let's look at
    an example of an ambiguous case. Type: 5 > 8 || 6 != 8 && 4 > 3.9"
  CorrectAnswer: "5 > 8 || 6 != 8 && 4 > 3.9"
  AnswerTests: omnitest(correctExpr='5 > 8 || 6 != 8 && 4 > 3.9')
  Hint: "See how the order of operations works by typing: 
    5 > 8 || 6 != 8 && 4 > 3.9"
  
- Class : text
  Output: "Let's walk through the order of operations in the above case. First the
    left and right operands of the AND operator are evaluated. 6 is not equal 8, 
    4 is greater than 3.9, therefore both operands are TRUE so the resulting expression 
    `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR operator is 
    evaluated: 5 is not greater than 8 so the entire expression is reduced to FALSE
    || TRUE. Since the right operand of this expression is TRUE the entire expression
    evaluates to TRUE."
    
- Class: mult_question
  Output: Which one of the following expressions evaluates to TRUE?
  CorrectAnswer: "TRUE && FALSE || 9 >= 4 && 3 < 6"
  AnswerChoices: "TRUE && FALSE || 9 >= 4 && 3 < 6; TRUE && 62 < 62 && 44 >= 44; 99.99 > 100 || 45 < 7.3 || 4 != 4.0; FALSE || TRUE && FALSE"
  AnswerTests: omnitest(correctVal='TRUE && FALSE || 9 >= 4 && 3 < 6')
  Hint: 'Try to evaluate each expression in isolation and build up an answer.'
  
- Class: mult_question
  Output: Which one of the following expressions evaluates to FALSE?
  CorrectAnswer: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5"
  AnswerChoices: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5; FALSE || TRUE && 6 != 4 || 9 > 4; !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79; 6 >= -9 && !(6 > 7) && !(!TRUE)"
  AnswerTests: omnitest(correctVal='FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5')
  Hint: 'Try to evaluate each expression in isolation and build up an answer.'
  
- Class : text
  Output: "Now that you're familiar with R's logical operators you can take advantage
    of a few functions that R provides for dealing with logical expressions."
    
- Class : cmd_question
  Output: "The function isTRUE() takes one argument. If that argument evaluates to
    TRUE, the function will return TRUE. Otherwise, the function will return FALSE.
    Try using this function by typing: isTRUE(6 > 4)"
  CorrectAnswer: "isTRUE(6 > 4)"
  AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Hint: "Test out isTRUE() by typing: isTRUE(6 > 4)"
  
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "!isTRUE(4 < 3)"
  AnswerChoices: "isTRUE(!TRUE); isTRUE(3); isTRUE(NA); !isTRUE(4 < 3); !isTRUE(8 != 5)"
  AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
  Hint: 'isTRUE() will only return TRUE if the statement passed to it as an argument is TRUE.'
  
- Class : cmd_question
  Output: "The function identical() will return TRUE if the two R objects passed to it as arguments
    are identical. Try out the identical() function by typing: identical('twins', 'twins')"
  CorrectAnswer: "identical('twins', 'twins')"
  AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
  Hint: "If you want to see if two R objects are identical, type: identical('twins', 'twins')"
  
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
  AnswerChoices: "identical(5 > 4, 3 < 3.1); identical(4, 3.1); identical('hello', 'Hello'); !identical(7, 7)"
  AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
  Hint: "identical() will only evaluate to TRUE if its arguments are exactly the same."
  
- Class : cmd_question
  Output: "You should also be aware of the xor() function, which takes two arguments. 
  The xor() function stands for exclusive OR.
  If one argument evaluates to TRUE and one argument evaluates to FALSE, then this
  function will return TRUE, otherwise it will return FALSE. Try out the xor() function
  by typing: xor(5 == 6, !FALSE)"
  CorrectAnswer: "xor(5 == 6, !FALSE)"
  AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Hint: "Test out the xor() function by typing: xor(5 == 6, !FALSE)"
  
- Class : text
  Output: "5 == 6 evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE)
    evaluates to TRUE. On the other hand if the first argument was changed to 5 == 5
    and the second argument was unchanged then both arguments would have been TRUE, 
    so xor(TRUE, TRUE) would have evaluated to FALSE."
    
- Class: mult_question
  Output: Which of the following evaluates to FALSE?
  CorrectAnswer: "xor(4 >= 9, 8 != 8.0)"
  AnswerChoices: "xor(4 >= 9, 8 != 8.0); xor(!isTRUE(TRUE), 6 > -1); xor(identical(xor, 'xor'), 7 == 7.0); xor(!!TRUE, !!FALSE)"
  AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
  Hint: "For xor() to evaluate to TRUE, one argument must be TRUE and one must be FALSE."
    
- Class : cmd_question
  Output: "For the next few questions, we're going to need to create a vector of 
   integers called ints. Create this vector by typing: ints <- sample(10)"
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  Hint: "To create a vector of ten integers without replacement type: ints <- sample(10)"
  
- Class : cmd_question
  Output: "Now simply display the contents of ints."
  CorrectAnswer: "ints"
  AnswerTests: omnitest(correctExpr='ints')
  Hint: "To view the vector type: ints"
  
- Class : cmd_question
  Output: "The vector `ints` is a random sampling of integers from 1 to 10 without
    replacement. Let's say we wanted to ask some logical questions about contents
    of ints. If we type ints > 5, we will get a logical vector corresponding to
    whether each element of ints is greater than 5. Try typing: ints > 5"
  CorrectAnswer: "ints > 5"
  AnswerTests: omnitest(correctExpr='ints > 5')
  Hint: "To see which elements of `ints` are larger than 5 type: ints > 5"
  
- Class : text
  Output: "We can use the resulting logical vector to ask other questions about ints.
    The which() function takes a logical vector as an argument and returns the indicies
    of the vector that are TRUE. For example which(c(TRUE, FALSE, TRUE)) would return
    the vector c(1, 3)."

- Class : cmd_question
  Output: "Use the which() function to find the indicies of ints that are greater 
    than 7."
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Hint: "Use the which() function on the logical vector produced by: `ints > 7`"
  
- Class: mult_question
  Output: Which of the following commands would produce the indicies of the elements in ints that
    are less than or equal to 2?
  CorrectAnswer: "which(ints <= 2)"
  AnswerChoices: "ints < 2; ints <= 2; which(ints < 2); which(ints <= 2)"
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Hint: 'Use the which() function.'
  
- Class : text
  Output: "Like the which() function, the functions any() and all() take logical
    vectors as their argument. The any() function will return TRUE if one or more
    of the elements in the logical vector is TRUE. The all() function will return
    TRUE if every element in the logical vector is TRUE."
    
- Class : cmd_question
  Output: "Use the any() function to see if any of the elements of ints are less
    than zero."
  CorrectAnswer: "any(ints < 0)"
  AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Hint: "Use the any() function on the logical vector produced by: `ints < 0`"
  
- Class : cmd_question
  Output: "Use the all() function to see if all of the elements of ints are greater
    than zero."
  CorrectAnswer: "all(ints > 0)"
  AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Hint: "Use the all() function on the logical vector produced by: `ints > 0`"
  
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Hint: "any() will evaluate to TRUE if there is one or more TRUE elements in a logical vector."
  
- Class : text
  Output: "That's all for this introduction to logic in R. If you really want to see
    what you can do with logic, check out the control flow lesson!"
